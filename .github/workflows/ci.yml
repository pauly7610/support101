name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
        node-version: [22.x]
    steps:
      - uses: actions/checkout@v4

      # Python backend setup
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Python venv
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            venv-${{ runner.os }}-

      - name: Install dependencies
        run: |
          set -e
          python -m venv ~/.venv
          source ~/.venv/bin/activate
          pip install -r apps/backend/requirements.txt

      - name: Add project root to PYTHONPATH
        run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)/apps/backend" >> $GITHUB_ENV

      - name: Install lint tools
        run: |
          set -e
          source ~/.venv/bin/activate
          pip install black flake8 isort

      - name: Lint
        run: |
          set -e
          ~/.venv/bin/black --check .
          ~/.venv/bin/flake8
          ~/.venv/bin/isort --check-only .

      - name: Check for missing LLM engine components
        run: |
          if [ ! -f packages/llm_engine/chains/rag_chain.py ]; then echo "rag_chain.py missing" && exit 1; fi

      - name: Start Postgres
        uses: harmon758/postgresql-action@v1
        with:
          postgresql version: '15'
          postgresql db: support101_test
          postgresql user: postgres
          postgresql password: postgres
        env:
          PGUSER: postgres
          PGPASSWORD: postgres

      - name: Create database for Alembic
        run: |
          sudo apt-get install -y postgresql-client
          psql -h localhost -U postgres -c "CREATE DATABASE support101;"
        env:
          PGPASSWORD: postgres

      - name: Start Redis
        uses: supercharge/redis-github-action@1.6.0
        with:
          redis-version: '7'
        env:
          REDIS_URL: redis://localhost:6379/0

      - name: Add project root to PYTHONPATH
        run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)" >> $GITHUB_ENV

      - name: Run Alembic migrations
        run: |
          set -e
          source ~/.venv/bin/activate
          alembic -c apps/backend/alembic.ini upgrade head

      - name: Run backend tests
        run: |
          set -e
          source ~/.venv/bin/activate
          pytest --maxfail=1 --disable-warnings --cov=apps/backend

      - name: Check backend components
        run: |
          set -e
          test -f apps/backend/migrations.py
          test -f packages/llm_engine/chains/rag_chain.py

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      # Node.js frontend setup
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache root node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-root-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-root-

      - name: Cache agent-copilot node_modules
        uses: actions/cache@v4
        with:
          path: apps/agent-copilot/node_modules
          key: ${{ runner.os }}-node-agent-copilot-${{ hashFiles('apps/agent-copilot/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-agent-copilot-

      - name: Cache customer-bot node_modules
        uses: actions/cache@v4
        with:
          path: apps/customer-bot/node_modules
          key: ${{ runner.os }}-node-customer-bot-${{ hashFiles('apps/customer-bot/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-customer-bot-

      - name: Install frontend dependencies (root and apps)
        run: |
          set -e
          npm ci --no-audit --no-fund
          cd apps/agent-copilot && npm ci --no-audit --no-fund
          cd ../customer-bot && npm ci --no-audit --no-fund

      - name: Build agent-copilot
        run: |
          set -e
          cd apps/agent-copilot
          npm run build

      - name: Build customer-bot
        run: |
          set -e
          cd apps/customer-bot
          npm run build

      - name: Lint frontends
        run: |
          set -e
          cd apps/agent-copilot && npx --no-install eslint .
          cd ../customer-bot && npx eslint .

      - name: Test frontends (if tests exist)
        run: |
          cd apps/agent-copilot && if [ -d "__tests__" ]; then npm test; fi
          cd ../customer-bot && if [ -d "__tests__" ]; then npm test; fi
